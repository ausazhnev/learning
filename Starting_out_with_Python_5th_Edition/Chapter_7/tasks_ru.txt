Данный файл содержит текст заданий раздела 'Упражнения по программированию' к главе 7:
'Списки и кортежи' книги: Начинаем программировать на Python. 5-е издание
Автор: Тони Гэддис

*************************************************************************************************

Задача #1: Общий объем продаж.

Разработайте программу, которая просит пользователя ввести продажи магазина за каждый день. Суммы
должны быть сохранены в списке. Примените цикл, что бы вычислить общий объем продаж за неделю и
показать результат.

Решение в файле 'task_7_1.py'

*************************************************************************************************

Задача #2: Генератор лотерейных чисел.

Разработайте программу, которая генерирует семизначную комбинацию лотерейных чисел. Программа
должна сгенерировать семь случайных чисел, каждое в диапазоне от 0 до 9, и присвоить каждое число
элементу списка. Затем напишите еще один цикл, который показывает содержимое списка.

Решение в файле 'task_7_2.py'

*************************************************************************************************

Задача #3: Статистика дождевых осадков.

Разработайте программу, которая позволяет пользователю занести в список общее количество дождевых
осадков за каждый из 12 месяцев. Программа должна вычислить и показать суммарное количество
дождевых осадков за год, среднее ежемесячное количество дождевых осадков и месяцы с самым высоким
и самым низким количеством дождевых осадков.

Решение в файле 'task_7_3.py'

*************************************************************************************************

Задача #4: Программа анализа чисел.

Разработайте программу, которая просит пользователя ввести ряд из 20 чисел. Программа должна
сохранить числа в списке и затем показать приведенные ниже данные:
 - наименьшее число в списке
 - наибольшее число в списке
 - сумму чисел в списке
 - среднее арифметическое значение числе в списке

Решение в файле 'task_7_4.py'

*************************************************************************************************

Задача #5: Проверка доступных номеров расходного счета.

Среди исходного кода главы 7 есть файл 'charge_accounts.txt'. В нем содержится список допустимых
номеров расходных счетов компании. Каждый номер счета представляет собой семизначное число в
частности 5658845.
Напишите программу, которая считывает содержимое файла в списке. Затем она должна попросить
пользователя ввести номер расходного счета. Программа должна определить, что номер является
допустимым, путем его поиска в списке. Если число в списке имеется, то программа должна вывести
сообщение, указывающее на то, что номер допустимый. Если числа в списке нет, то программа должна
вывести сообщение о том, что номер недопустимый.

Решение в файле 'task_7_5.py'

*************************************************************************************************

Задача #6: Больше числа n.

В программе напишите функцию, которая принимает два аргумента: список и число n. Допустим, что
список содержит числа. Функция должна показать все числ в списке, которые больше n.

Решение в файле 'task_7_6.py'

*************************************************************************************************

Задача #7: Экзамен на получение водительских прав.

Местный отдел по выдаче удостоверений на право вождения автомобиля попросил вас создать
приложение, которое оценивает письменную часть экзамена на получение водительских прав. Экзамен
состоит из 20 вопросов с множественным выбором. Вот правильные ответы:
1. A   6. B   11. A   16. C
2. C   7. C   12. D   17. B
3. A   8. A   13. C   18. B
4. A   9. C   14. A   19. D
5. D   10.D   15. D   20. A
Ваша программа должна сохранить эти правильные ответы в списке, Программа должна прочитать из
текстового файла ответы испытуемого на каждый из 20 вопросов и сохранить эти ответы еще в один
список. (Создайте собственный текстовый файл для тестирования приложения или воспользуйтесь
файлом student_solution.txt, который можно найти в исходных файлах главы 7) После того как ответы
испытуемого будут считаны из файла, программа должна вывести сообщение о том, сдал испытуемый
экзамен или нет. (Для сдачи экзамена испытуемый должен правильно ответить на 15 из 20 вопросов)
Затем программа должна, вывести общее количество вопросов, ответы на которые были правильными,
общее количество вопросов, ответы на которые были неправильными, и список с номерами вопросов,
ответы на которые были неправильными.

Решение в файле 'task_7_7.py'

*************************************************************************************************

Задача #8: Поиск имени.

Среди исходного кода главы 7 вы найдете приведенные ниже файлы:
 - GirlNames.txt - файл со списком популярных имен, данных девочкам родителями.
 - BoyNames.txt - файл со списком популярных имен, данных мальчикам родителями.
Напишите программу, которая считывает содержимое этих двух файлов в два отдельных списка.
Пользователь должен иметь возможность ввести имя мальчика, или девочки или оба имени, и
приложение должно вывести сообщение о том, что введенные имена находятся среди самых популярных
имен.

Решение в файле 'task_7_8.py'

*************************************************************************************************

Задача #9: Данные о населении.

Среди исходного кода главы 7 вы найдете файл USPopulation.txt. В нем хранятся данные о
среднегодовой численности населения США в тысячах с 1950 по 1990 год. Первая строка в файле
содержит численность населения в 1950 году, вторая строка - численность населения в 1951 году
и т.д.
Напишите программу, которая считывает содержимое файла в список. Программа должна показать
приведенные ниже данные:
 - среднегодовое изменение численности населения в течении указанного периода времени
 - год с наибольшим увеличением численности населения в течении указанного периода времени
 - год с наименьшим увеличением численности населения в течении указанного периода времени

Решение в файле 'task_7_9.py'

*************************************************************************************************

Задача #10: Чемпионы мировой серии.

Среди исходного кода главы 7 вы найдете файл WorldSeriesWinner.txt. Он содержит хронологический
список команд-победителей Мировой серии по бейсболу с 1903 по 2009 год. (Первая строка в файле
является названием команды, которая победила в 1903 году, а последняя строка - названием команды
которая победила в 2009 году. Обратите внимание, что Мировая серия не проводилась в 1904 и 1994
годах.)
Напишите программу, которая позволяет пользователю ввести название команды и затем выводит
количество лет, когда команда побеждала в Мировой серии в течение указанного периода времени с
1903 по 2009 год.

Решение в файле 'task_7_10.py'

*************************************************************************************************

Задача #11: Магический квадрат Ло Шу.

Магический квадрат Ло Шу представляет собой таблицу с 3 строчками и 3 столбцами (рисунок можно
найти в папке dop/task_7_11.png). Магический квадрат Ло Шу имеет свойства:
 - таблица содержит числа строго от 1 до 9
 - сумма каждой строки, каждого столбца и каждой диагонали в итоге составляет одно и то же число
 (рисунок можно найти в папке dop/task_7_11.png)
Магический квадрат можно сымитировать в программе при помощи двумерного списка. Напишите функцию,
которая принимает двумерный список в качестве аргумента и определяет, является ли список
магическим квадратом Ло Шу. Протестируйте функцию в программе.

Решение в файле 'task_7_11.py'

*************************************************************************************************

Задача #12: Генерация простого числа.

Натуральное (целое положительное) число является простым, если оно не имеет делителей кроме 1 и
самого себя. Натуральное (Целое положительное) число является составным, если оно не является
простым. Напишите программу, которая просит пользователя ввести целое число больше 1 и затем
выводит все простые числа которые меньше или равны введенному числу. Программа должна работать
следующим образом:
 - После того как пользователь ввел число, программа должна заполнить список всеми целыми числами
 начиная с 2 и до введенного значения
 - Затем программа должна применить цикл, чтобы пройти по списку. Каждый элемент должен быть
 передан в функцию, которая определяет и сообщает, что элемент является простым числом или
 составным числом.

Решение в файле 'task_7_12.py'

*************************************************************************************************

Задача #13: Магический шар.

Напишите программу, моделирующую магический шар, т. е. игрушку, которая предсказывает и дает
случайный ответ на общий вопрос, требующий ответа 'да' или 'нет'. Среди исходного кода главы 7
вы найдете файл 8_ball_responses.txt. Этот файл содержит 12 ответов, в частности: 'Не думаю',
'Да, конечно!', 'Не уверен' и т.д. Программа должна прочитать ответы из файла в списке,
предложить пользователю задать вопрос и затем показать один из вариантов ответов, отобранных из
списка случайным образом. Программа должна продолжать работу до тех пор, пока пользователь не
будет готов из нее выйти.

Решение в файле 'task_7_13.py'

*************************************************************************************************

Задача #14: Круглая диаграмма расходов.

Создайте текстовый файл, который содержит ваши расходы за прошлый месяц по приведенным ниже
статьям:
 - арендная плата
 - бензин
 - продукты питания
 - одежда
 - платежи по автомашине
 - прочие
Напишите программу Python, которая считывает данные из файла и использует пакет matplotlib для
построения круговой диаграммы, показывающей, как вы тратите свои деньги.

Решение в файле 'task_7_14.py'

*************************************************************************************************

Задача #15: График еженедельных цен на бензин за 1994 год.

Среди исходного кода главы 7 вы найдете файл 1994_Weekly_Gas_Averages.txt. Он содержит среднюю
цену бензина в течение каждой недели 1994 года. (в файле 52 строки) Используя пакет matplotlib,
напишите программу Python, которая считывает содержимое файла и затем строит либо линейный
график, либо гистограмму. Не забудьте показать содержательные метки вдоль осей 'x' и 'y', а так
же метки делений.

Решение в файле 'task_7_15.py'

*************************************************************************************************